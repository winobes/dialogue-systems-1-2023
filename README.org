#+TITLE: DIALOGUE SYSTEMS 2023 (LT2216/LT2816)
* Overview
You will have 5 labs:

|   | Title                               | Deadline |
|---+-------------------------------------+----------|
| 1 | [[labs/lab1.org][Lab I. Dialogue]]                     | TBA      |
| 2 | [[labs/lab2.org][Lab II. Basic dialogue management]]   | TBA      |
| 3 | [[labs/lab3.org][Lab III. Speech synthesis]]           | TBA      |
| 4 | Lab IV. NLU                         | TBA      |
| 5 | [[labs/lab5.org][Lab V. Advanced dialogue management]] | TBA      |

* How to run ~speechstate~
** Install NodeJS, yarn and the dependencies

** Create Azure account and enable speech services
1. Apply for free student credits
   https://azure.microsoft.com/en-us/free/students/. You should be
   able to login with your GU account.
2. Make sure that you are logged into the Azure portal (https://portal.azure.com/).
3. Create a *Resource group* (you can use search field):
   - Subscription: *Azure for students*
   - Resource group: any name
   - Region: *(Europe) North Europe*
4. Create a *Speech service*:
   - Name: any name
   - Subscription: *Azure for students*
   - Location: *(Europe) North Europe*
   - Pricing tier: *Free (F0)*
   - Resource group: group name from the previous step
5. Within your Speech Service go to: *Resourse management â†’ Keys and
   Endpoint* and copy your KEY 1.
** Configure your app
Modify the file ~static/index.html~ with desired Azure Key and app languages.
#+begin_src 
<div
  id="speechstate"
  data-azure-key="<your azure key>" 
  data-tts-voice="en-US"
  data-asr-language="en-US"
></div>
#+end_src
** Run server
*** locally
with the command:
#+begin_src
yarn start
#+end_src
*** deploy to github pages
with the command:
#+begin_src
yarn deploy
#+end_src

* Feedback

* Project 

** Install

`goban` is now installed from NPM (included in `package.json`), so the project should run with

#+begin_src
yarn install
yarn start
#+end_src

** TODO

- The goban is very small because bigger square sizes cause the background and the intersections to separate on two lines. May be a bug with goban or may be an unexpected consequence of some implementation detail. Needs investigating.
- `const fiddler = new EventEmitter();` is a hack. `fiddler` shouldn't be necessary. Instead, we should make the goban engine part of the dialogue state explicitly. This will also allow us to send events from the goban engine to the state machine (currently that doesn't seem possible)
- `scoreEstimator` needs debugging (errors with function `malloc` not found) -- this is important for ending the game, since the score is usually determined by mutual agreement. 
